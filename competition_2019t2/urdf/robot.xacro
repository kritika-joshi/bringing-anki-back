<?xml version='1.0'?>

<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- CONSTANTS -->
  <xacro:property name="camera_width" value="0.2"/>
  <xacro:property name="camera_length" value="0.2"/>
  <xacro:property name="camera_height" value="0.1"/>
  <xacro:property name="camera_mass" value="0.01"/>
  <xacro:property name="chassis_width" value="0.4"/>
  <xacro:property name="chassis_length" value="0.6"/>
  <xacro:property name="chassis_height" value="0.03"/>
  <xacro:property name="chassis_height_B" value="0.3"/>
  <xacro:property name="chassis_mass" value="1.5"/>
  <xacro:property name="chassis_mass_B" value="0.005"/>
  <xacro:property name="wheel_radius" value="0.1"/>
  <xacro:property name="wheel_width" value="0.1"/>
  <xacro:property name="wheel_mass" value="0.25"/>

  <xacro:property name="i0" value="1e-10"/> <!-- default inertia -->

  <xacro:property name="u0" value="0.5"/> <!-- default miu (friction coef.) (orig: 0.8693)-->

  <xacro:include filename="$(find competition_2019t2)/urdf/materials.xacro"/>

  <!-- MACROS -->
  <macro name="cylinder_inertial" params="name m r h">
    <inertial name="${name}_inertial">
      <mass value="${m}"/>
      <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "${i0}" ixz = "${i0}"
                iyy="${m*(3*r*r+h*h)/12}" iyz = "${i0}"
                izz="${m*r*r/2}"/>
    </inertial>
  </macro>

  <macro name="box_inertial" params="name m x y z">
    <inertial name="${name}_inertial">
      <mass value="${m}"/>
      <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "${i0}" ixz = "${i0}"
                iyy="${m*(x*x+y*y)/12}" iyz = "${i0}"
                izz="${m*(x*x+z*z)/12}"/>
    </inertial>
  </macro>

  <macro name="sphere_inertial" params="name m r">
    <inertial name="${name}_inertial">
      <mass value="${m}"/>
      <inertia  ixx="${2*m*r*r/5}" ixy = "${i0}" ixz = "${i0}"
                iyy="${2*m*r*r/5}" iyz = "${i0}"
                izz="${2*m*r*r/5}"/>
    </inertial>
  </macro>

  <!-- ROBOT DESIGN -->

  <!-- 1. Chasis -->
  <link name='chassis'>
    <xacro:box_inertial name="chassis" m="${chassis_mass}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}"/>
    <collision name='chassis_collision'>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <visual name='chassis_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
  </link>

  <link name="upper_half">
    <xacro:box_inertial name="upper_half" m="${chassis_mass_B}" x="${chassis_length}" y="${chassis_width}" z="${chassis_height_B}"/>
    <origin xyz = "0.0 0.0 0.0"/>
    <visual>
      <geometry>
        <box size = "${chassis_length} ${chassis_width} ${chassis_height_B}"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size = "${chassis_length} ${chassis_width} ${chassis_height_B}"/>
      </geometry>
    </collision>
  </link>

  <joint name="chassis_joint" type="fixed">
    <origin xyz="0 0 ${chassis_height/2+chassis_height_B/2}"/>
    <parent link="chassis"/>
    <child link="upper_half"/>
  </joint>

  <!-- 2. Wheels -->
  <link name='wheel_FR'>
    <xacro:cylinder_inertial name="wheel_FR" m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    <collision name='wheel_FR_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_FR_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_FL'>
    <xacro:cylinder_inertial name="wheel_FL" m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    <collision name='wheel_FL_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_FL_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_RR'>
    <xacro:cylinder_inertial name="wheel_RR" m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    <collision name='wheel_RR_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_RR_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_RL'>
    <xacro:cylinder_inertial name="wheel_RL" m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    <collision name='wheel_RL_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_RL_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <!-- Wheels joints -->
  <joint name="wheel_FR_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_FR"/>
    <origin xyz="${chassis_length/2-wheel_radius} -${chassis_width/2+wheel_width/2} -${chassis_height/2+wheel_radius/2}"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_FL_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_FL"/>
    <origin xyz="${chassis_length/2-wheel_radius} ${chassis_width/2+wheel_width/2} -${chassis_height/2+wheel_radius/2}"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_RR_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_RR"/>
    <origin xyz="-${chassis_length/2-wheel_radius} -${chassis_width/2+wheel_width/2} -${chassis_height/2+wheel_radius/2}"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_RL_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_RL"/>
    <origin xyz="-${chassis_length/2-wheel_radius} ${chassis_width/2+wheel_width/2} -${chassis_height/2+wheel_radius/2}"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <!-- 3. Camera --> 
  <link name='camera_link'>
    <xacro:box_inertial name="camera_link" m="${camera_mass}" x="${camera_width}" y="${camera_length}" z="${camera_height}"/>
    <collision name='camera_link_collision'>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
    </collision>
    <visual name='camera_link_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
    </visual>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="chassis"/>
    <child link="camera_link"/>
    <origin xyz="${chassis_length/2} 0 ${chassis_height/2 + chassis_height_B + camera_height/2}"/>
  </joint>

  <!-- PLUGINS -->
  <gazebo reference="chassis">
    <material>Gazebo/Orange</material>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="wheel_FR">
    <mu1>${u0}</mu1>
    <mu2>${u0}</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>
  <gazebo reference="wheel_FL">
    <mu1>${u0}</mu1>
    <mu2>${u0}</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>
  <gazebo reference="wheel_RR">
    <mu1>${u0}</mu1>
    <mu2>${u0}</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>
  <gazebo reference="wheel_RL">
    <mu1>${u0}</mu1>
    <mu2>${u0}</mu2>
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo>
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <updateRate>10.0</updateRate>
      <robotNamespace>/</robotNamespace>
      <leftFrontJoint>wheel_FL_joint</leftFrontJoint>
      <rightFrontJoint>wheel_FR_joint</rightFrontJoint>
      <leftRearJoint>wheel_RL_joint</leftRearJoint>
      <rightRearJoint>wheel_RR_joint</rightRearJoint>
      <wheelSeparation>0.4</wheelSeparation>
      <wheelDiameter>0.215</wheelDiameter>
      <robotBaseFrame>base_link</robotBaseFrame>
      <torque>20</torque>
      <topicName>cmd_vel</topicName>
      <broadcastTF>false</broadcastTF>
    </plugin>
  </gazebo>

  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>10.0</update_rate>
      <camera name="head">
        <horizontal_fov>2</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
